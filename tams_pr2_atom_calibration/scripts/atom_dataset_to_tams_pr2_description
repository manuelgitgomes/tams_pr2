#!/usr/bin/env python3

import os
import shutil
import argparse
import json
from colorama import Fore, Style
import rospkg
from atom_core.xacro_io import readXacroFile
import yaml
import tf


def main():
    # ---------------------------------------
    # --- Read command line arguments
    # ---------------------------------------
    ap = argparse.ArgumentParser()
    ap.add_argument("-d", "--dataset", help="Path to dataset json file", type=str,
                    required=True)
    args = vars(ap.parse_known_args()[0])

    print('Converting ATOM dataset to TAMS PR2 robot description')

    print('Creating backup of calibration_config.yml')
    rospack = rospkg.RosPack()
    tams_pr2_description_path = rospack.get_path('tams_pr2_description')
    output_file = tams_pr2_description_path + '/config/calibration_config.yaml' 
    shutil.copyfile(output_file, output_file + '.bkp')

    # Load dataset
    f = open(args['dataset'], 'r')
    dataset = json.load(f)

    # Define first collection
    selected_collection_key = list(dataset['collections'].keys())[0]

    # Read description file
    robot_description = readXacroFile(f'{tams_pr2_description_path}/robots/tams_pr2.urdf.xacro')

    with open(output_file, 'r') as file:
        dict_yml = yaml.safe_load(file)

    # Cycle all sensors in calibration config, and only affect azure_rgb_camera
    found = False
    for sensor_key, sensor in dataset["calibration_config"]['sensors'].items():
        if sensor_key != 'azure_rgb_camera':
            continue

        # Search for corresponding transform. Since this is a sensor transformation it must be static, which is why we use only one collection, the selected collection key
        for transform_key, transform in dataset['collections'][selected_collection_key]['transforms'].items():

            if not (sensor['parent_link'] == transform['parent'] and sensor['child_link'] == transform['child']):
                continue

            # Find calibrated transform and compare with initial transform to get delta
            trans = transform['trans']
            quat = transform['quat']
            rpy = tf.transformations.euler_from_quaternion(quat, axes='rxyz') 

            original_trans = dataset['collections'][selected_collection_key]['transforms_ini'][transform_key]['trans'] 
            original_quat = dataset['collections'][selected_collection_key]['transforms_ini'][transform_key]['quat'] 
            original_rpy = tf.transformations.euler_from_quaternion(original_quat, axes='rxyz')
    
            dict_yml['azure_kinect_camera_base_pos_x'] += float(trans[0] - original_trans[0])
            dict_yml['azure_kinect_camera_base_pos_y'] += float(trans[1] - original_trans[1])
            dict_yml['azure_kinect_camera_base_pos_z'] += float(trans[2] - original_trans[2])
            dict_yml['azure_kinect_camera_base_rot_r'] += float(rpy[0] - original_rpy[0])
            dict_yml['azure_kinect_camera_base_rot_p'] += float(rpy[1] - original_rpy[1])
            dict_yml['azure_kinect_camera_base_rot_y'] += float(rpy[2] - original_rpy[2])
            found = True
            break
        if not found:
            raise ValueError("Could not find transform for sensor " + sensor_key +
                            '. Cannot produce yaml file with calibration results.')


    # Cycle all calibrated joints
    if dataset['calibration_config']['joints'] is not None:
        for config_joint_key, config_joint in dataset["calibration_config"]['joints'].items():
            found = False
            joint_name = config_joint_key.replace('_joint','')
            if config_joint_key not in dataset['collections'][selected_collection_key]['joints'].keys():
                raise ValueError("Could not find values for joint " + config_joint_key +
                                '. Cannot produce yaml file with calibration results.')

            # Get original joint values from robot description
            for joint_description in robot_description.joints:
                if not joint_description.name == config_joint_key:
                    continue

                xyz_description = joint_description.origin.xyz
                rpy_description = joint_description.origin.rpy
                break

            # Get difference between original and calibrated and add the delta to the yaml file
            for param_to_calibrate in config_joint['params_to_calibrate']:
                if param_to_calibrate == 'origin_roll':
                    original_angle = rpy_description[0]
                elif param_to_calibrate == 'origin_pitch':
                    original_angle = rpy_description[1]
                elif param_to_calibrate == 'origin_yaw':
                    original_angle = rpy_description[2]
                calibrated_angle = dataset['collections'][selected_collection_key]['joints'][config_joint_key][param_to_calibrate]
                dict_yml[joint_name + '_calib_ref'] += calibrated_angle - original_angle 
                found = True
                break

            if not found:
                raise ValueError("Could not find transform for joint " + config_joint_key +
                                '. Cannot produce yaml file with calibration results.')


    print('Saved calibrated parameters to yaml file ' + Fore.BLUE + output_file + Style.RESET_ALL)
    yaml.dump(dict_yml, open(output_file, 'w'), sort_keys=False)

if __name__ == '__main__':
    main()